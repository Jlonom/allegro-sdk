<?php

namespace Jlonom\AllegroSDK\Model;

class PickupAddressDto extends \ArrayObject
{
    /**
     * @var array
     */
    protected $initialized = [];
    public function isInitialized($property): bool
    {
        return array_key_exists($property, $this->initialized);
    }
    /**
     * Person name. Name or Company are required.
     *
     * @var string
     */
    protected $name;
    /**
     * Company name. Name or Company are required.
     *
     * @var string
     */
    protected $company;
    /**
     * 
     *
     * @var string
     */
    protected $street;
    /**
     * 
     *
     * @var string
     */
    protected $postalCode;
    /**
     * 
     *
     * @var string
     */
    protected $city;
    /**
     * Required for shipments to Ireland( county name ), United States ( state abbreviation / ISO code ), Canada ( province postal code / ISO code )
     *
     * @var string
     */
    protected $state;
    /**
     * Country code in ISO 3166-1 alfa-2 format (two-letter code).
     *
     * @var string
     */
    protected $countryCode = 'PL';
    /**
     * Email address. For receiver, must be a valid buyer email generated by Allegro (eg. hamu7udk3p+17454c1b6@allegromail.pl).
     *
     * @var string
     */
    protected $email;
    /**
     * Cell phone
     *
     * @var string
     */
    protected $phone;
    /**
     * Drop off point id. You can get it directly from courier service.
     *
     * @var string
     */
    protected $point;
    /**
     * Person name. Name or Company are required.
     *
     * @return string
     */
    public function getName(): string
    {
        return $this->name;
    }
    /**
     * Person name. Name or Company are required.
     *
     * @param string $name
     *
     * @return self
     */
    public function setName(string $name): self
    {
        $this->initialized['name'] = true;
        $this->name = $name;
        return $this;
    }
    /**
     * Company name. Name or Company are required.
     *
     * @return string
     */
    public function getCompany(): string
    {
        return $this->company;
    }
    /**
     * Company name. Name or Company are required.
     *
     * @param string $company
     *
     * @return self
     */
    public function setCompany(string $company): self
    {
        $this->initialized['company'] = true;
        $this->company = $company;
        return $this;
    }
    /**
     * 
     *
     * @return string
     */
    public function getStreet(): string
    {
        return $this->street;
    }
    /**
     * 
     *
     * @param string $street
     *
     * @return self
     */
    public function setStreet(string $street): self
    {
        $this->initialized['street'] = true;
        $this->street = $street;
        return $this;
    }
    /**
     * 
     *
     * @return string
     */
    public function getPostalCode(): string
    {
        return $this->postalCode;
    }
    /**
     * 
     *
     * @param string $postalCode
     *
     * @return self
     */
    public function setPostalCode(string $postalCode): self
    {
        $this->initialized['postalCode'] = true;
        $this->postalCode = $postalCode;
        return $this;
    }
    /**
     * 
     *
     * @return string
     */
    public function getCity(): string
    {
        return $this->city;
    }
    /**
     * 
     *
     * @param string $city
     *
     * @return self
     */
    public function setCity(string $city): self
    {
        $this->initialized['city'] = true;
        $this->city = $city;
        return $this;
    }
    /**
     * Required for shipments to Ireland( county name ), United States ( state abbreviation / ISO code ), Canada ( province postal code / ISO code )
     *
     * @return string
     */
    public function getState(): string
    {
        return $this->state;
    }
    /**
     * Required for shipments to Ireland( county name ), United States ( state abbreviation / ISO code ), Canada ( province postal code / ISO code )
     *
     * @param string $state
     *
     * @return self
     */
    public function setState(string $state): self
    {
        $this->initialized['state'] = true;
        $this->state = $state;
        return $this;
    }
    /**
     * Country code in ISO 3166-1 alfa-2 format (two-letter code).
     *
     * @return string
     */
    public function getCountryCode(): string
    {
        return $this->countryCode;
    }
    /**
     * Country code in ISO 3166-1 alfa-2 format (two-letter code).
     *
     * @param string $countryCode
     *
     * @return self
     */
    public function setCountryCode(string $countryCode): self
    {
        $this->initialized['countryCode'] = true;
        $this->countryCode = $countryCode;
        return $this;
    }
    /**
     * Email address. For receiver, must be a valid buyer email generated by Allegro (eg. hamu7udk3p+17454c1b6@allegromail.pl).
     *
     * @return string
     */
    public function getEmail(): string
    {
        return $this->email;
    }
    /**
     * Email address. For receiver, must be a valid buyer email generated by Allegro (eg. hamu7udk3p+17454c1b6@allegromail.pl).
     *
     * @param string $email
     *
     * @return self
     */
    public function setEmail(string $email): self
    {
        $this->initialized['email'] = true;
        $this->email = $email;
        return $this;
    }
    /**
     * Cell phone
     *
     * @return string
     */
    public function getPhone(): string
    {
        return $this->phone;
    }
    /**
     * Cell phone
     *
     * @param string $phone
     *
     * @return self
     */
    public function setPhone(string $phone): self
    {
        $this->initialized['phone'] = true;
        $this->phone = $phone;
        return $this;
    }
    /**
     * Drop off point id. You can get it directly from courier service.
     *
     * @return string
     */
    public function getPoint(): string
    {
        return $this->point;
    }
    /**
     * Drop off point id. You can get it directly from courier service.
     *
     * @param string $point
     *
     * @return self
     */
    public function setPoint(string $point): self
    {
        $this->initialized['point'] = true;
        $this->point = $point;
        return $this;
    }
}