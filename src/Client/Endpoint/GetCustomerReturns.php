<?php

namespace Jlonom\AllegroSDK\Endpoint;

class GetCustomerReturns extends \Jlonom\AllegroSDK\Runtime\Client\BaseEndpoint implements \Jlonom\AllegroSDK\Runtime\Client\Endpoint
{
    /**
     * Use this resource to get all customer returns filtered by query parameters. Read more: <a href="../../tutorials/jak-obslugiwac-zamowienia-GRaj0qyvwtR#jak-pobrac-liste-zwrotow" target="_blank">PL</a> / <a href="../../tutorials/process-orders-PgPMlWDr8Cv#how-to-retrieve-customer-returns-list" target="_blank">EN</a>. This resource is limited to 25 requests per second for a single user and 50 requests per second for clientId.
     *
     * @param array $queryParameters {
     *     @var string $customerReturnId One or more customer return id's.
     *     @var string $orderId One or more order id's.
     *     @var string $buyer.email One or more buyer emails.
     *     @var string $buyer.login One or more buyer logins.
     *     @var string $items.offerId One or more returned item offer id's.
     *     @var string $items.name One or more item names.
     *     @var string $parcels.waybill One or more waybill id's.
     *     @var string $parcels.transportingWaybill Waybill ids as generated by carriers physically transporting the parcel. Will be null if there's only one carrier involved in a parcel shipment.
     *     @var string $parcels.carrierId One or more carrier id's.
     *     @var string $parcels.transportingCarrierId Carrier id of a carrier physically transporting the parcel. Will be null if there's only one carrier involved in a parcel shipment.
     *     @var string $parcels.sender.phoneNumber One or more phone numbers.
     *     @var string $referenceNumber One or more reference numbers.
     *     @var string $from The ID of the last seen customer return. Customer returns created after the given customer return will be returned.
     *     @var string $createdAt.gte Date of the return in ISO 8601 format to search by greater or equal.
     *     @var string $createdAt.lte Date of the return in ISO 8601 format to search by lower or equal.
     *     @var string $marketplaceId The marketplace ID where operation was made. When the parameter is omitted, searches for operations with all marketplaces.
     *     @var string $status Current return timeline statuses. The allowed values are:
     * CREATED
     * DISPATCHED
     * IN_TRANSIT
     * DELIVERED
     * FINISHED
     * FINISHED_APT
     * REJECTED
     * COMMISSION_REFUND_CLAIMED
     * COMMISSION_REFUNDED
     * WAREHOUSE_DELIVERED
     * WAREHOUSE_VERIFICATION.
     *     @var int $limit Limit of customer returns per page.
     *     @var int $offset The offset of elements in the response.
     * }
     */
    public function __construct(array $queryParameters = [])
    {
        $this->queryParameters = $queryParameters;
    }
    use \Jlonom\AllegroSDK\Runtime\Client\EndpointTrait;
    public function getMethod(): string
    {
        return 'GET';
    }
    public function getUri(): string
    {
        return '/order/customer-returns';
    }
    public function getBody(\Symfony\Component\Serializer\SerializerInterface $serializer, $streamFactory = null): array
    {
        return [[], null];
    }
    public function getExtraHeaders(): array
    {
        return ['Accept' => ['application/vnd.allegro.beta.v1+json']];
    }
    protected function getQueryOptionsResolver(): \Symfony\Component\OptionsResolver\OptionsResolver
    {
        $optionsResolver = parent::getQueryOptionsResolver();
        $optionsResolver->setDefined(['customerReturnId', 'orderId', 'buyer.email', 'buyer.login', 'items.offerId', 'items.name', 'parcels.waybill', 'parcels.transportingWaybill', 'parcels.carrierId', 'parcels.transportingCarrierId', 'parcels.sender.phoneNumber', 'referenceNumber', 'from', 'createdAt.gte', 'createdAt.lte', 'marketplaceId', 'status', 'limit', 'offset']);
        $optionsResolver->setRequired([]);
        $optionsResolver->setDefaults(['limit' => 100, 'offset' => 0]);
        $optionsResolver->addAllowedTypes('customerReturnId', ['string']);
        $optionsResolver->addAllowedTypes('orderId', ['string']);
        $optionsResolver->addAllowedTypes('buyer.email', ['string']);
        $optionsResolver->addAllowedTypes('buyer.login', ['string']);
        $optionsResolver->addAllowedTypes('items.offerId', ['string']);
        $optionsResolver->addAllowedTypes('items.name', ['string']);
        $optionsResolver->addAllowedTypes('parcels.waybill', ['string']);
        $optionsResolver->addAllowedTypes('parcels.transportingWaybill', ['string']);
        $optionsResolver->addAllowedTypes('parcels.carrierId', ['string']);
        $optionsResolver->addAllowedTypes('parcels.transportingCarrierId', ['string']);
        $optionsResolver->addAllowedTypes('parcels.sender.phoneNumber', ['string']);
        $optionsResolver->addAllowedTypes('referenceNumber', ['string']);
        $optionsResolver->addAllowedTypes('from', ['string']);
        $optionsResolver->addAllowedTypes('createdAt.gte', ['string']);
        $optionsResolver->addAllowedTypes('createdAt.lte', ['string']);
        $optionsResolver->addAllowedTypes('marketplaceId', ['string']);
        $optionsResolver->addAllowedTypes('status', ['string']);
        $optionsResolver->addAllowedTypes('limit', ['int']);
        $optionsResolver->addAllowedTypes('offset', ['int']);
        return $optionsResolver;
    }
    /**
     * {@inheritdoc}
     *
     *
     * @return null
     */
    protected function transformResponseBody(\Psr\Http\Message\ResponseInterface $response, \Symfony\Component\Serializer\SerializerInterface $serializer, ?string $contentType = null)
    {
        $status = $response->getStatusCode();
        $body = (string) $response->getBody();
        if (200 === $status) {
        }
        if (400 === $status) {
        }
        if (401 === $status) {
        }
        if (403 === $status) {
        }
        if (406 === $status) {
        }
    }
    public function getAuthenticationScopes(): array
    {
        return ['bearerAuth'];
    }
}